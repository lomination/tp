#!/usr/bin/env bash


# This script is from https://github.com/lomination/tp.
# This code is under license GNU General Public License version 3.


##################################################
#                   CONSTANTS                    #
##################################################


# The version of this script.
version='1.0.3'

# The path to this file.
tp_path="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# The date.
curr_date="$( date +'%Y-%m-%d' )"
# The time.
curr_time="$( date +'%H:%M:%S' )"

# The path of the logfile.
logfile="/tmp/tp-log-$curr_date.log"
echo -e "\n### [ ${curr_date} | ${curr_time} ]\n\nCalled with \`$*\`\n" >> "$logfile"


##################################################
#                FILE DESCRIPTORS                #
##################################################


exec 3>&1           # redirect 3 -> 1
exec &>> "$logfile" # redirect 1 & 2 -> $logfile


##################################################
#                     STYLES                     #
##################################################


# All attributes become turned off.
none='\033[0m'
# Increases the intensity of the text.
bold='\033[1m'
# Decreases the intensity of the text.
decrease='\033[2m'
# Makes the text in italics.
italics='\033[3m'
# Underlines the text.
underline='\033[4m'
# Reverses the colors of the background and the foreground.
reverse='\033[7m'
# Makes the text red.
red='\033[31m'
# Makes the text green.
green='\033[32m'
# Makes the text yellow.
yellow='\033[33m'
# Makes the text blue.
blue='\033[34m'
# Makes the text magenta.
magenta='\033[35m'
# Makes the text white.
white='\033[37m'
# Makes the text bright yellow.
bright_yellow='\033[93m'
# Makes the text bright blue.
bright_blue='\033[94m'

# The style for code display.
code="$italics$green"
# The style for the important information.
information="$underline"
# The style for title display.
title="$bold$underline"
# The style for a note display in any documentation paragraph.
note="$blue"
# The style for a warning display in any documentation paragraph.
warning="$yellow"


##################################################
#                     CONFIG                     #
##################################################


# The path to the configuration file.
conf_path="$tp_path/tp.conf"
# Is 'true' or 'false' depending on whether the configuration file exists and is valid.
conf_is_valid=''
if [[ -f "$conf_path" ]] && [[ -r "$conf_path" ]]; then
	echo -e 'Config file found.'
	conf_is_valid='true'
else
	echo -e 'Config file not found.'
	conf_is_valid='false'
fi

# Returns the value associated to the given key in the configuration file (<key>=<value>). If the configuration file is not valid (does not exists, cannot be read...), or if the key is not found, returns the default value given as second positional argument.
get_config_key() {

	# The key to search in the configuration.
	key="$1"
	# The default value of the searched key.
	default="$2"
	if [[ conf_is_valid == 'true' ]]; then
		value="$( grep -G "^$key=" "$conf_path" | cut -d'=' -f2 )"
		if [[ -z "$value" ]]; then
			echo "$default"
		else
			echo "$value"
		fi
	else
		echo "$default"
	fi

}

# Whether short explanations are displayed while running.
conf_log_on_std="$( get_config_key 'log_in_std' 'true' )"
# Whether added changes are displayed when git add is performed.
conf_list_added_changes="$( get_config_key 'list_added_changes' 'false' )"


##################################################
#                   FUNCTIONS                    #
##################################################


# Prints the given string in the standard output.
myecho() {
	
    echo -e "$*" >&3

}

# Echoes the given information. Writes it in the logfile and the standard output if conf_log_on_std is set to 'true'.
echoinfo() {

	echo -e ">>> $*" # echoing to logfile
	if [[ "$conf_log_on_std" == 'true' ]]; then
		myecho "$decrease$*...$none" # echoing to stdout
	fi

}

# Logs the given message into the logfile.
log() {

	echo -e "$*"

}


# Prints a warning in the standard output and in the log file.
warn() {

	if [[ -z "$*" ]]; then
		echo -e "Warning."
		myecho "${yellow}Warning.$none"
	else
		echo -e "Warning: $*"
		myecho "${yellow}Warning:$none $*"
	fi

}

# Shows a failure message and exit the execution with exit code 1.
die() {

	msg="$*"
	if [[ -z "$msg" ]]; then
		echo -e "Fatal error"
		myecho "${red}Fatal error!$none (logfile: $logfile)"
	else
		echo -e "Fatal error: $msg"
		myecho "${red}Fatal error:$none $msg (logfile: $logfile)"
	fi
	exit 1

}

# Shows a success message and exit the execution with exit code 0.
success() {

	msg="$*"
	if [[ -z "$msg" ]]; then
		myecho "${green}Success!$none"
	else
		myecho "${green}Success:$none $msg"
	fi
	exit 0

}


##################################################
#                 ARCHI COMMAND                  #
##################################################


archi_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp archi\` submits an archi tag to the moulinette. It requires to have no unstaged change in the current git index.

		It takes as argument the name of the tag. If none is given, a random one is generated using \`openssl rand -hex 4\`. The name of the tag should not contain the prefix 'archi-' since it is automatically added.

		${title}USAGE:$none

		\ttp archi [-f] [<tagname>]

		${title}OPTIONS:$none

		\t-f, --force: Allow to push even with unstaged changes.

		\t-h, --help: Show this message.

		${title}EXAMPLES:$none

		\ttp archi first # => archi-first

		\ttp archi       # => archi-2e7970a9
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Allows to push a tag with unstaged changes.
	force='false'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-f'|'--force')
				force='true'
				shift
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	if [[ "$force" != 'true' ]] && [[ "$( git status --porcelain | wc -l )" != '0' ]]; then
		die "There are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
	fi

	# Choose a tag name
	if [[ -n "$1" ]]; then
		tagname="$1"
	else
		tagname="$( openssl rand -hex 4 )"
	fi

	# Create a tag
	echoinfo 'Creating the tag'
	git tag -ma "archi-$tagname" || die 'Failed to create the git tag.'

	# Push the tag and the commit
	echoinfo 'Synchronizing the git remote'
	git push --follow-tag || die 'Failed to push to the remote repository.'

	success

}


##################################################
#                 HELP COMMAND                   #
##################################################


help_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp help\` displays the documentation associated with a given command. It can take as argument the name of a command.

		The commands are: log, status, test, init, save, archi, submit, update.

		${title}USAGE:$none

		\ttp help [<command>]

		${title}EXAMPLES:$none

		\ttp help init

		\ttp help
		EOF
	)"

	case "$1" in
		'log'|'lg')
			log_cmd '--help' ;;
		'status'|'st')
			status_cmd '--help' ;;
		'test')
			test_cmd '--help' ;;
		'init')
			init_cmd '--help' ;;
		'save')
			save_cmd '--help' ;;
		'archi')
			archi_cmd '--help' ;;
		'submit')
			submit_cmd '--help' ;;
		'update')
			update_cmd '--help' ;;
		''|'help'|'-h'|'--help')
			myecho "$help_msg"
			exit 0
			;;
		'-'*|'--'*)
			die "Unknown option $1"
			;;
		*)
			die "Invalid command $1. Check out ${code}tp help$none."
			;;
	esac

}


##################################################
#                 INIT COMMAND                   #
##################################################


init_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp init\` command can be used to easily set-up the dotnet solution and project required for your practical.
		
		It should be used only once at the beginning of your practical. In details, this command clones your repo, creates the main and the test C# projects, then adds default .gitignore and README files and finally commits and pushes the work.

		It takes as argument the name of the practical and the url to the git remote.

		${title}USAGE:$none

		\ttp init [--dir-name <directoryname>] [--readme <readmecontent> | --no-readme] [--no-push] [--no-test] [--magic-archi <tree>] <title> <giturl>

		${title}OPTIONS:$none

		\t--dir[ectory]-name <directoryname>: Change the name of the cloned directory to the given one. By default, its name is the title of the practical.

		\t--readme <readmecontent>: Write the given content into the README file. By default, since it must not be empty, it contains the title of the practical.

		\t--no-readme: Skip the creation of the README file.

		\t--no-push: Skip the push of the first committo the remote.

		\t--no-test[s]: Skip the creation of the XUnit project. Remainder: you are not a perfect programmer.

		\t--magic-archi <tree>: Use the magic archi feature with the given tree. It will create files and folders in the repository for it to match the given tree output.

		\t-h, --help: Show this message.

		${title}EXAMPLES:$none

		\ttp init "GaulishMall" "firsname.lastname@git.forge.epita.fr:p/epita-prepa-computer-science/prog-...-2029/epita-prepa-computer-science-prog-...-2029-firstname.lastname.git"

		\ttp init --dir-name tp3 --readme "This is a cool readme file!" "GaulishMall" "..."

		\ttp init SmurfManagement lomi.nation@git.forge.epita.fr... --magic-archi "prog-103-p-05-2028-firstname.lastname
		\t├── SmurfManagement
		\t│   ├── Enhancements
		\t│   │   ├── Inventory.cs
		\t│   │   ├── ItemSet.cs
		\t│   │   ├── ItemType.cs
		\t│   │   ├── Recipe.cs
		\t│   │   └── Village.cs
		\t│   ├── Fundamentals
		\t│   │   ├── Book.cs
		\t│   │   ├── BookRentable.cs
		\t│   │   ├── Disc.cs
		\t│   │   ├── DiscRentable.cs
		\t│   │   ├── IRentableItem.cs
		\t│   │   ├── Item.cs
		\t│   │   ├── Librarian.cs
		\t│   │   ├── Library.cs
		\t│   │   ├── RentableInfo.cs
		\t│   │   ├── Smurf.cs
		\t│   │   └── Villager.cs
		\t│   ├── Profimagicciencies
		\t│   │   ├── Adult.cs
		\t│   │   ├── Elder.cs
		\t│   │   ├── ISerializable.cs
		\t│   │   ├── Kid.cs
		\t│   │   ├── Serializer.cs
		\t│   │   ├── SmurfIndividual.cs
		\t│   │   └── Tree.cs
		\t│   ├── Program.cs
		\t│   └── SmurfManagement.csproj
		\t├── Tests
		\t│   └── Put your tests here
		\t├── .gitignore
		\t├── README
		\t└── SmurfManagement.sln" --no-push
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Whether a README file should be created or not.
	create_readme='true'
	# The content of the REAMDE. If empty, the default value is the title of the practical.
	readme_content=''
	# The name of directory of the clone repository. If empty, the default value is the title of the practical.
	directory_name=''
	# Whether the first commit should be pushed or not. Set to true by default.
	push='true'
	# Whether a test project should be created or not. By default, set to true.
	create_test='true'
	# Whether the architecture of the practical given in the guidelines should be created.
	magic_archi='false'
	# The tree of the practical, guven in the guidelines.
	arch_tree=''

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'--dir-name'|'--directory-name')
				directory_name="$2"
				shift 2
				;;
			'--readme')
				readme_content="$2"
				shift 2
				;;
			'--no-readme')
				create_readme='false'
				shift
				;;
			'--no-push')
				push='false'
				shift
				;;
			'--no-test'|'--no-tests')
				create_test='false'
				shift
				;;
			'--magic-archi')
				magic_archi='true'
				arch_tree="$2"
				shift 2
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	# The title of the practical
	title="$1"
	# The url to the git repository of the practical
	git_url="$2"

	# Check if the given arguments are valid
	echoinfo 'Checking arguments'
	if [[ -z "$title" ]]; then
		die "Missing required argument 'title' at position 1. Check out ${code}tp help init$none."
	fi
	if [[ -z "$git_url" ]]; then
		die "Missing required argument 'git_url' at position 2. Check out ${code}tp help init$none."
	fi

	# Set the name of the clone directory to the name of the practical if no value has been given.
	if [[ -z "$directory_name" ]]; then
		directory_name="$title"
	fi

	# Clone the git repository
	echoinfo 'Cloning the repository'
	git clone "$git_url" "$directory_name" || die 'Failed to clone the git repository.'

	# Go to the cloned repository
	cd "$directory_name" || die "Failed to enter the directory $directory_name."

	# Create dotnet solution
	echoinfo 'Creating the dotnet solution'
	dotnet new sln --name "$title" || die 'Failed to create the dotnet solution.'

	# Create main project
	echoinfo 'Creating the dotnet console project'
	dotnet new console -n "$title" -f net7.0 -lang 'C#' || die 'Failed to create the main project.'
	dotnet sln add "$title/$title.csproj" || die 'Failed to add the main project to the dotnet solution.'

	# Create test project
	if [[ "$create_test" != 'false' ]]; then
		echoinfo 'Creating the dotnet xunit project'
		dotnet new xunit -n 'Tests' -f net7.0 -lang 'C#' || die 'Failed to create the XUnit test project.'
		dotnet sln add 'Tests/Tests.csproj' || die 'Failed to add the test project to the dotnet solution.'
		rm 'Tests/UnitTest1.cs' || warn 'Failed to remove the unit test file template Tests/UnitTest1.cs.'
		dotnet add Tests/Tests.csproj reference "$title/$title.csproj" || die 'Failed to add reference between the test project and the main project.'
		echo -e "\nglobal using $title;\n" >> 'Tests/GlobalUsings.cs' || warn 'Failed to add the main namespace in the Usings file.'
	fi

	# Create the .gitignore file
	echoinfo 'Creating the .gitignore file'
	echo -e 'bin/\nobj/\n\n.idea/\n*~\n*.DotSettings.user\n.vscode' > .gitignore || die

	# Create the README file
	if [[ "$create_readme" != 'false' ]]; then
		echoinfo 'Creating the README file'
		if [[ -z "$readme_content" ]]; then
			readme_content="# $title"
		fi
		echo "$readme_content" > README || die
	fi

	# Push the changes on the remote
	echoinfo 'Saving changes with git'
	git add -A || die
	git commit -m 'First commit' || die
	if [[ "$push" != 'false' ]]; then
		echoinfo 'Synchronizing the git remote'
		git push || die
	fi

	# Create the architecture of the practical ("magic archi")
	echoinfo 'Running magic archi'
	if [[ "$magic_archi" != 'false' ]]; then
		arch_tree="$( sed '1,2d' <<< "$arch_tree" )" || die 'Failed to manipulate the given tree'
		path="./$title"
		depth='1'
		while read line; do
			if [[ "$line" == ├* ]]; then
				# '├── Tests' has been reached, no more files to create
				log 'The end of the tree has been reached'
				break
			else
				log "Processing line: $line"
				# The depth of the current $line
				curr_depth="$( echo "$line" | grep -o '│   ' | wc -l )" || die 'Failed to calculate the depth of the line'
				# Go to the parent directory as many times as needed
				for ((i="$curr_depth";i<"$depth";i++)); do
					path="$( dirname "$path" )" || die "Failed to get the parent directory of the path $path"
				done
				depth="$curr_depth"
				# The name of the file or the directory to create
				itemname="$( echo "$line" | awk '{print $NF}' )" || die 'Failed to extract the name of the item'
				if [[ "$itemname" == *.cs ]]; then
					log "Creating C# file: $path/$itemname" 
					cs_namespace="$( tr '/' '.' <<< "${path:2}" )" || die 'Failed to get the corresponding C# namespace'
					cs_class="${itemname::-3}" || die 'Failed to get the corresponding C# class'
					touch "$path/$itemname" || die "Failed to create file $itemname in the directory $path"
					cat > "$path/$itemname" <<-EOF
					namespace $cs_namespace;

					public class $cs_class
					{

					}
					EOF
				elif [[ "$itemname" == *.csproj ]]; then
					log 'Ignoring the .csproj that should already be created.'
				elif [[ "$itemname" == *.* ]]; then
					log "Creating unknown file: $path/$itemname" 
					touch "$path/$itemname" || die "Failed to create file $itemname in the directory $path"
					warn "The file $itemname in $path is neither a C# file nor a directory. It has been created as an empty text file."
				else
					log "Creating directory: $path/$itemname" 
					mkdir "$path/$itemname" || die "Failed to create directory $itemname in the directory $path"
					path="$path/$itemname"
					depth="$(( $depth+1 ))"
				fi
			fi
		done <<< "$arch_tree"
		git add -A || die 'Failed to git add'
		git commit -m 'Magic archi' || die 'Failed to git commit'
		if [[ "$push" != 'false' ]]; then
			echoinfo 'Synchronizing the git remote'
			git push || die 'Failed to git push'
		fi
		myecho 'The magic archi feature may lead to unexpected results. Please verify the created files and folders. If the result is not the one expected, feel free to undo the magic archi with:\ngit revert HEAD\nAnd follow the on-screen instructions.'
	fi

	success

}


##################################################
#                  LOG COMMAND                   #
##################################################


log_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp log\` command is a pretty alias for git log. It shows the commit logs.

		${title}USAGE:$none

		\ttp log

		${title}OPTIONS:$none

		\t-h, --help: Show this message.
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	git log --color --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -- >&3

}


##################################################
#                  SAVE COMMAND                  #
##################################################


save_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp save\` command save the changes of the files of the practical. In details, it add all the changed files, commit them and push the commit to the remote.

		It takes as argument the name of the commit that will be created and pushed. If none is given, a random one is generated using openssl rand -hex 4.

		Make sure to have an appropriate .gitignore file to avoid pushing trash file on the remote!
		
		${title}USAGE:$none

		tp save [-a <file>] [--no-push] [<commitname>]

		${title}OPTIONS:$none

		\t-a <file>, --add <file>: Add the given file instead of adding all changed files.

		\t--no-push: Skip the push of the commit to the remote.

		\t-h, --help: Show this message.

		${title}EXAMPLES:$none

		\ttp save "Fix NegaFibonacci encoding algorithm"
		
		\ttp save -a README -- Update the README file

		\ttp save -a Truc.cs -a Machin.cs --no-push Truc\\ and \\ Machin\\ ok!
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# The files to add to the commit. If empty, add all changed files.
	added_files=''
	# Whether the commit will be pushed.
	push='true'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-a'|'--add')
				added_files="$added_files $2"
				shift 2
				;;
			'--no-push')
				push='false'
				shift
				;;
			'--')
				shift
				positional_args+=("$*")
				break
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	# The name of the commit.
	commit_name="$1"

	# Testing if there are changes to commit
	if [[ "$( git status --porcelain | wc -l )" == '0' ]]; then
		success 'Nothing to commit, the git working tree is clean.'
	fi

	# Choosing a commit name
	if [[ -n "$1" ]]; then
		commit="$1"
	else
		commit="Commit-$( openssl rand -hex 4 )"
	fi

	# Commit the changes
	echoinfo 'Committing changes'
	if [[ "$added_files" == '' ]]; then
		git add -A || die 'Failed to add all changed files to the git index.'
	else
		git add "$added_files" || die 'Failed to add given files to the git index.'
	fi
	if [[ "$conf_list_added_changes" == 'true' ]]; then
		git diff --name-status >&3 || warn 'Failed to print added changes.'
	fi
	git commit -m "$commit" || die 'Failed to create the git commit.'

	# Push the commit
	if [[ "$push" != 'false' ]]; then
		echoinfo 'Synchronizing the git remote'
		git push || die 'Failed to push to the remote repository.'
	fi

	success

}


##################################################
#                STATUS COMMAND                  #
##################################################


status_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp status\` command is an alias for the git status command.

		${title}USAGE:$none

		\ttp status

		${title}OPTIONS:$none

		\t-h, --help: Show this message.
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"

				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	git status -sb >&3

}


##################################################
#                 SUBMIT COMMAND                 #
##################################################


submit_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp submit\` submits a submit tag to the moulinette. It requires to have no unstaged change in the current git index.

		It takes as argument the name of the tag. If none is given, a random one is generated using \`openssl rand -hex 4\`. The name of the tag should not contain the prefix 'submit-' since it is automatically added.

		${title}USAGE:$none

		\ttp submit [-f] [<tagname>]

		${title}OPTIONS:$none

		\t-f, --force: Allow to push even with unstaged changes.

		\t-h, --help: Show this message.

		${title}EXAMPLES:$none

		\ttp submit first # => submit-first

		\ttp submit       # => submit-2e7970a9
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Allows to push a tag with unstaged changes.
	force='false'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-f'|'--force')
				force='true'
				shift
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	if [[ "$force" != 'true' ]] && [[ "$( git status --porcelain | wc -l )" != '0' ]]; then
		die "There are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
	fi

	# Choose a tag name
	if [[ -n "$1" ]]; then
		tagname="$1"
	else
		tagname="$( openssl rand -hex 4 )"
	fi

	# The number the user must enter
	num="$(shuf -i 100000-999999 -n 1)"
	myecho "${bold}Are you sure that you want to push a ${red}submit$none$bold tag named submit-$tagname?$none\nPlease enter the following number to validate: $underline$num$none. Press enter with an invalid input to exit."
	read -p '> ' input
	if [[ "$input" -ne "$num" ]]; then
		myecho 'Invalid code. Command canceled!'
		exit 0
	fi
	myecho 'Valid input.'

	# Create a tag
	echoinfo 'Creating the tag'
	git tag -ma "submit-$tagname" || die

	# Push the tag and the commit
	echoinfo 'Synchronizing the git remote'
	git push --follow-tag || die

	success

}


##################################################
#                 TEST COMMAND                   #
##################################################


test_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp test\` command run the XUnit project of the solution in the terminal.

		${title}USAGE:$none

		\ttp test

		${title}OPTIONS:$none

		\t-h, --help: Show this message.
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	dotnet test --nologo -v q >&3
	dotnet clean &> /dev/null

}


##################################################
#                UPDATE COMMAND                  #
##################################################


update_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		The \`tp update\` command updates this script. If a newer version of it is available on Github, this command will download it and install it.

		This command does not require any administrator permission.

		${title}USAGE:$none

		\ttp update

		${title}OPTIONS:$none

		\t-h, --help: Show this message.
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	# Get the newest version
	echoinfo 'Downloading the newest version from the remote'
	new_version_path="$( mktemp '/tmp/tp-new-version-XXXXXXXXXXXXXXXXXXXX') " || die
	wget -O "$new_version_path" 'https://github.com/lomination/tp/releases/latest/download/tp' || die

	# Determine if an upgrade is needed
	echoinfo 'Comparing remote version with local one'
	if cmp "$tp_path/tp" "$new_version_path" ; then
		success 'The local version is already up-to-date!'
	else
		# Create the update script
		echoinfo 'Creating the update script'
		# The path to the update script
		update_script_path="$( mktemp '/tmp/tp-update-script-XXXXXXXXXXXXXXXXXXXX') "
		# Write out the update script
		cat > "$update_script_path" <<-EOF
		#!/usr/bin/env bash

		die() {
			echo -e "Fatal error: \$1"
			myecho "$bold${red}Fatal error:$none \$1 (logfile: $logfile)"
			exit 1
		}

		rm '$update_script_path'
		mv '$new_version_path' '$tp_path/tp' || die 'Failed to move the new version.'
		chmod +x '$tp_path/tp' || die 'Failed to make the new script executable'

		rm '$logfile'
		echo -e '$bold${green}Successfully updated!' >&3
		exit 0
		EOF
		echoinfo 'Executing the update script'
		# Make the script executable
		chmod +x "$update_script_path" || die 'Could not make the update script executable'
		# Run the script
		exec "$update_script_path" || die 'Could not exectute the update script'
	fi

}


##################################################
#                      MAIN                      #
##################################################


first="$1"
shift

case "$first" in
	'log'|'lg')
		log_cmd "$@"
		;;
	'status'|'st')
		status_cmd "$@"
		;;
	'test')
		test_cmd "$@"
		;;
	'init')
		init_cmd "$@"
		;;
	'save')
		save_cmd "$@"
		;;
	'archi')
		archi_cmd "$@"
		;;
	'submit')
		submit_cmd "$@"
		;;
	'update')
		update_cmd "$@"
		;;
	'help'|'-h'|'--help')
		help_cmd "$@"
		;;
	'-v'|'--version')
		myecho "$version"
		exit 0
		;;
	'--config-path')
		myecho "$conf_path"
		exit 0
		;;
	'-'*|'--'*)
		die "Unknown option $1"
		;;
	*)
		die "Invalid command $1. Check out ${code}tp help$none."
		;;
esac
