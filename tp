#!/usr/bin/env bash


# This script is from https://github.com/lomination/tp.
# This code is under license GNU General Public License version 3.


##################################################
#                   CONSTANTS                    #
##################################################


# The version of this script.
version='1.0.3'

# The path to this file.
tp_path="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# The date.
curr_date="$( date +'%Y-%m-%d' )"
# The time.
curr_time="$( date +'%H:%M:%S' )"

# The path of the logfile.
logfile="/tmp/tp-log-$curr_date.log"
echo -e "\n### [ ${curr_date} | ${curr_time} ]\n\nCalled with \`$*\`\n" >> "$logfile"


##################################################
#                FILE DESCRIPTORS                #
##################################################


exec 3>&1          # redirect 3 -> 1
exec &>> "$logfile" # redirect 1 & 2 -> $logfile


##################################################
#                     STYLES                     #
##################################################


# All attributes become turned off.
none='\033[0m'
# Increases the intensity of the text.
bold='\033[1m'
# Decreases the intensity of the text.
decrease='\033[2m'
# Makes the text in italics.
italics='\033[3m'
# Underlines the text.
underline='\033[4m'
# Reverses the colors of the background and the foreground.
reverse='\033[7m'
# Makes the text red.
red='\033[31m'
# Makes the text green.
green='\033[32m'
# Makes the text yellow.
yellow='\033[33m'
# Makes the text blue.
blue='\033[34m'
# Makes the text magenta.
magenta='\033[35m'
# Makes the text white.
white='\033[37m'
# Makes the text bright yellow.
bright_yellow='\033[93m'
# Makes the text bright blue.
bright_blue='\033[94m'

# The style for code display.
code="$italics$green"
# The style for the important information.
information="$underline"
# The style for title display.
title="$bold$reverse"
# The style for a note display in any documentation paragraph.
note="$blue"
# The style for a warning display in any documentation paragraph.
warning="$yellow"


##################################################
#                     CONFIG                     #
##################################################


# The path to the configuration file.
conf_path="$tp_path/tp.conf"
# Is 'true' or 'false' depending on whether the configuration file exists and is valid.
conf_is_valid=''
if [[ -f "$conf_path" ]] && [[ -r "$conf_path" ]]; then
	echo -e 'Config file found.'
	conf_is_valid='true'
else
	echo -e 'Config file not found.'
	conf_is_valid='false'
fi

# Returns the value associated to the given key in the configuration file (<key>=<value>). If the configuration file is not valid (does not exists, cannot be read...), or if the key is not found, returns the default value given as second positional argument.
get_config_key() {

	# The key to search in the configuration.
	key="$1"
	# The default value of the searched key.
	default="$2"
	if [[ conf_is_valid == 'true' ]]; then
		value="$( grep -G "^$key=" "$conf_path" | cut -d'=' -f2 )"
		if [[ -z "$value" ]]; then
			echo "$default"
		else
			echo "$value"
		fi
	else
		echo "$default"
	fi

}

# Whether short explanations are displayed while running.
conf_log_on_std="$( get_config_key 'log_in_std' 'true' )"
# Whether added changes are displayed when git add is performed.
conf_list_added_changes="$( get_config_key 'list_added_changes' 'false' )"


##################################################
#                   FUNCTIONS                    #
##################################################


# Prints the given string in the standard output.
myecho() {
	
    echo -e "$*" >&3

}

# Logs the given message. Writes it in the logfile and the standard output if conf_log_on_std is set to 'true'.
log() {

	echo -e ">>> $*" # echoing to logfile
	if [[ "$conf_log_on_std" == 'true' ]]; then
		myecho "$decrease$*...$none" # echoing to stdout
	fi

}


# Prints a warning in the standard output and in the log file.
warn() {

	if [[ -z "$*" ]]; then
		echo -e "Warning."
		myecho "${yellow}Warning.$none"
	else
		echo -e "Warning: $*"
		myecho "${yellow}Warning:$none $*"
	fi

}

# Shows a failure message and exit the execution with exit code 1.
die() {

	msg="$*"
	if [[ -z "$msg" ]]; then
		echo -e "Fatal error"
		myecho "${red}Fatal error!$none (logfile: $logfile)"
	else
		echo -e "Fatal error: $msg"
		myecho "${red}Fatal error:$none $msg (logfile: $logfile)"
	fi
	exit 1

}

# Shows a success message and exit the execution with exit code 0.
success() {

	msg="$*"
	if [[ -z "$msg" ]]; then
		myecho "${green}Success!$none"
	else
		myecho "${green}Success:$none $msg"
	fi
	exit 0

}


##################################################
#                 ARCHI COMMAND                  #
##################################################


archi_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThe ${code}tp archi$none submits an ${information}archi tag$none to the mouli.

		\t${note}It there are uncommitted changes in the working directory, the command will be automatically cancelled.

		${title}(USAGE)$none

		\tIt takes as parameters the ${information}name of the tag$none. If none is given, a random one is generated.

		\t${note}The name of the archi tag should not contain the prefix 'archi-' since it is automatically added.

		\tUsages:
		\t- ${code}tp archi <tag_name>$none
		\t- ${code}tp archi$none

		${title}(EXAMPLES)$none

		\t${code}tp archi "first"$none
		\t${code}tp archi "0"$none
		\t${code}tp archi$none
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Allows to push a tag with unstaged changes.
	force='false'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-f'|'--force')
				force='true'
				shift
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	if [[ "$force" != 'true' ]] && [[ "$( git status --porcelain | wc -l )" != '0' ]]; then
		die "There are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
	fi

	# Choose a tag name
	if [[ -n "$1" ]]; then
		tag_name="$1"
	else
		tag_name="$( openssl rand -hex 4 )"
	fi

	# Create a tag
	log 'Creating the tag'
	git tag -ma "archi-$tag_name" || die 'Failed to create the git tag.'

	# Push the tag and the commit
	log 'Synchronizing the git remote'
	git push --follow-tags || die 'Failed to push to the remote repository.'

	success

}


##################################################
#                 HELP COMMAND                   #
##################################################


help_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\t${information}Display the documentation$none associated with a given command.

		${title}(USAGE)$none

		\tIt takes as parameter a ${information}command$none among ${code}init$none, ${code}save$none, ${code}archi$none, ${code}submit$none, ${code}update$none, ${code}log$none, ${code}status$none, ${code}pull$none, ${code}config$none, ${code}test$none, and ${code}help$none.

		\tUsage: ${code}tp help <command>$none
		\tUsage: ${code}tp help$none

		${title}(EXAMPLES)$none

		\t${code}tp help init$none
		\t${code}tp help submit$none
		\t${code}tp help log$none
		\t${code}tp help$none
		EOF
	)"

	case "$1" in
		'log'|'lg')
			log_cmd '--help' ;;
		'status'|'st')
			status_cmd '--help' ;;
		'pull'|'sync')
			pull_cmd '--help' ;;
		'test')
			test_cmd '--help' ;;
		'init')
			init_cmd '--help' ;;
		'save')
			save_cmd '--help' ;;
		'archi')
			archi_cmd '--help' ;;
		'submit')
			submit_cmd '--help' ;;
		'update')
			update_cmd '--help' ;;
		''|'help'|'-h'|'--help')
			myecho "$help_msg"
			exit 0
			;;
		'-'*|'--'*)
			die "Unknown option $1"
			;;
		*)
			die "Invalid command $1. Check out ${code}tp help$none."
			;;
	esac

}


##################################################
#                 INIT COMMAND                   #
##################################################


init_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThe ${code}tp init$none command makes the beginning of your practical ${information}quicker$none and ${information}easier$none. It should be used ${information}only once$none at the beginning of your practical. This command clones your repo, creates the main and the test C# solutions, then adds default .gitignore and README files and finally commits and pushes the work.

		${title}(USAGE)$none

		\tIt takes as parameter the title of the ${information}current practical's title$none and the ${information}git url${none} of the empty repo to clone. Both can be found on the intra forge's web site.

		\tUsage: ${code}tp init <title> <git_url>${none}

		${title}(EXAMPLES)$none

		\t${code}tp init "GaulishMall" "firsname.lastname@git.forge.epita.fr:p/epita-prepa-computer-science/prog-...-2029/epita-prepa-computer-science-prog-...-2029-firstname.lastname.git"$none
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Whether a README file should be created or not.
	create_readme='true'
	# The content of the REAMDE. If empty, the default value is the title of the practical.
	readme_content=''
	# The name of directory of the clone repository. If empty, the default value is the title of the practical.
	directory_name=''
	# Whether the first commit should be pushed or not. Set to true by default.
	push='true'
	# Whether a test project should be created or not. By default, set to true.
	create_test='true'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'--directory-name')
				directory_name="$2"
				shift 2
				;;
			'--readme')
				readme_content="$2"
				shift 2
				;;
			'--no-readme')
				create_readme='false'
				shift
				;;
			'--no-push')
				push='false'
				shift
				;;
			'--no-test'|'--no-tests')
				create_test='false'
				shift
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	# The title of the practical
	title="$1"
	# The url to the git repository of the practical
	git_url="$2"

	# Check if the given arguments are valid
	log 'Checking arguments'
	if [[ -z "$title" ]]; then
		die "Missing required argument 'title' at position 1. Check out ${code}tp help init$none."
	fi
	if [[ -z "$git_url" ]]; then
		die "Missing required argument 'git_url' at position 2. Check out ${code}tp help init$none."
	fi

	# Set the name of the clone directory to the name of the practical if no value has been given.
	if [[ -z "$directory_name" ]]; then
		directory_name="$title"
	fi

	# Clone the git repository
	log 'Cloning the repository'
	git clone "$git_url" "$directory_name" || die 'Failed to clone the git repository.'

	# Go to the cloned repository
	cd "$directory_name" || die "Failed to enter the directory $directory_name."

	# Create dotnet solution
	log 'Creating the dotnet solution'
	dotnet new sln --name "$title" || die 'Failed to create the dotnet solution.'

	# Create main project
	log 'Creating the dotnet console project'
	dotnet new console -n "$title" -f net7.0 -lang 'C#' || die 'Failed to create the main project.'
	dotnet sln add "$title/$title.csproj" || die 'Failed to add the main project to the dotnet solution.'

	# Create test project
	if [[ "$create_test" != 'false' ]]; then
		log 'Creating the dotnet xunit project'
		dotnet new xunit -n 'Tests' -f net7.0 -lang 'C#' || die 'Failed to create the XUnit test project.'
		dotnet sln add 'Tests/Tests.csproj' || die 'Failed to add the test project to the dotnet solution.'
		rm 'Tests/UnitTest1.cs' || warn 'Failed to remove the unit test file template Tests/UnitTest1.cs.'
		dotnet add Tests/Tests.csproj reference "$title/$title.csproj" || die 'Failed to add reference between the test project and the main project.'
		echo -e "\nglobal using $title;\n" >> 'Tests/GlobalUsings.cs' || warn 'Failed to add the main namespace in the Usings file.'
	fi

	# Create the .gitignore file
	log 'Creating the .gitignore file'
	echo -e 'bin/\nobj/\n\n.idea/\n*~\n*.DotSettings.user\n.vscode' > .gitignore || die

	# Create the README file
	if [[ "$create_readme" != 'false' ]]; then
		log 'Creating the README file'
		if [[ -z "$readme_content" ]]; then
			readme_content="# $title"
		fi
		echo "$readme_content" > README || die
	fi

	# Push the changes on the remote
	log 'Saving changes with git'
	git add -A || die
	git commit -m 'First commit'  || die
	if [[ "$push" != 'false' ]]; then
		log 'Synchronizing the git remote'
		git push || die
	fi

	success

}


##################################################
#                  LOG COMMAND                   #
##################################################


log_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThis command is an alias of the ${code}git log$none command.

		${title}(EXAMPLE)$none

		\t${code}tp log$none
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	git log --color --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -- >&3

}


##################################################
#                 PULL COMMAND                   #
##################################################


pull_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThis command is an alias of the ${code}git pull$none command.

		${title}(EXAMPLE)$none

		\t${code}tp pull$none
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	if git status -uno | grep -q "Your branch is behind" ; then
		git pull >&3 || die 'Failed to pull from remote.'
		success
	else
		success 'The repository is already up-to-date.'
	fi

}


##################################################
#                  SAVE COMMAND                  #
##################################################


save_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThis command is a shortcut for ${information}git add$none, ${information}git commit$none and ${information}git push$none.

		\t${warn}It adds every current changes in the repository. Make sure to have an appropriate .gitignore file to avoid pushing trash file on the remote!

		${title}(USAGE)$none

		\tIt takes as parameter the ${information}name of the commit$none that will be created and pushed. If none is given, a ${information}random one is generated$none.

		\tUsages:
		\t- ${code}tp save <commit_name>${none}
		\t- ${code}tp save${none}

		${title}(EXAMPLES)$none
		\t
		\t${code}tp save "Fix NegaFibonacci encoding algorithm"$none
		\t${code}tp save$none
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# The files to add to the commit. If empty, add all changed files.
	added_files=''

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-a'|'--add')
				added_files="$added_files $2"
				shift 2
				;;
			'--')
				shift
				positional_args+=("$*")
				break
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	# The name of the commit.
	commit_name="$1"

	# Testing if there are changes to commit
	if [[ "$( git status --porcelain | wc -l )" == '0' ]]; then
		success 'Nothing to commit, the git working tree is clean.'
	fi

	# Choosing a commit name
	if [[ -n "$1" ]]; then
		commit="$1"
	else
		commit="Commit-$( openssl rand -hex 4 )"
	fi

	# Commit the changes
	log 'Committing changes'
	if [[ "$added_files" == '' ]]; then
		git add -A || die 'Failed to add all changed files to the git index.'
	else
		git add "$added_files" || die 'Failed to add given files to the git index.'
	fi
	if [[ "$conf_list_added_changes" == 'true' ]]; then
		git diff --name-status >&3 || warn 'Failed to print added changes.'
	fi
	git commit -m "$commit" || die 'Failed to create the git commit.'

	# Push the commit
	log 'Synchronizing the git remote'
	git push || die 'Failed to push to the remote repository.'

	success

}


##################################################
#                STATUS COMMAND                  #
##################################################


status_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThis command is an alias of the ${code}git status$none command.

		${title}(EXAMPLE)$none

		\t${code}tp status$none
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"

				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	git status -sb >&3

}


##################################################
#                 SUBMIT COMMAND                 #
##################################################


submit_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThe ${code}tp submit$none submits an ${information}submit tag$none to the mouli.

		\t${warn}Make sure you have already submitted an archi tag and that it has a valid output before running this command.

		${title}(USAGE)$none

		\tIt takes as parameters the ${information}name of the tag$none. If none is given, a random one is generated.

		\t${note}The name of the submit tag should not contain the prefix 'submit-' since it is automatically added.

		\tUsages:
		\t- ${code}tp submit <tag_name>$none
		\t- ${code}tp submit$none

		${title}(EXAMPLES)$none

		\t${code}tp submit "adamsromance"$none
		\t${code}tp submit "first-try"$none
		\t${code}tp submit$none
		EOF
	)"

	# The array containing the positional arguments given as parameter to this function.
	positional_args=()
	# Allows to push a tag with unstaged changes.
	force='false'

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-f'|'--force')
				force='true'
				shift
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				positional_args+=("$1")
				shift
				;;
		esac
	done

	# Restore positional parameters
	set -- "${positional_args[@]}"

	if [[ "$force" != 'true' ]] && [[ "$( git status --porcelain | wc -l )" != '0' ]]; then
		die "There are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
	fi

	# Choose a tag name
	if [[ -n "$1" ]]; then
		tag_name="$1"
	else
		tag_name="$( openssl rand -hex 4 )"
	fi

	# The number the user must enter
	num="$(shuf -i 100000-999999 -n 1)"
	myecho "${bold}Are you sure that you want to push a ${red}submit$none$bold tag named submit-$tag_name?$none\nPlease enter the following number to validate: $underline$num$none. Press enter with an invalid input to exit."
	read -p '> ' input
	if [[ "$input" -ne "$num" ]]; then
		myecho 'Invalid code. Command canceled!'
		exit 0
	fi
	myecho 'Valid input.'

	# Create a tag
	log 'Creating the tag'
	git tag -ma "submit-$tag_name" || die

	# Push the tag and the commit
	log 'Synchronizing the git remote'
	git push --follow-tags || die

	success

}


##################################################
#                 TEST COMMAND                   #
##################################################


test_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\tThis command runs the tests of the current dotnet solution.

		${title}(EXAMPLE)$none

		\t${code}tp test$none
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	dotnet test --nologo -v q >&3
	dotnet clean &> /dev/null

}


##################################################
#                UPDATE COMMAND                  #
##################################################


update_cmd() {

	# Display the help and exit the script.
	help_msg="$(
		cat <<-EOF
		${title}(DESCRIPTION)$none

		\t${information}Update$none this command if an update is available.

		${title}(USAGE)$none

		\tUsage: ${code}tp update$none

		${title}(EXAMPLES)$none

		\t${code}tp update$none
		\t${code}tp submit$none
		EOF
	)"

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			'-h'|'--help')
				myecho "$help_msg"
				exit 0
				;;
			'-'*|'--'*)
				die "Unknown option $1"
				;;
			*)
				die "Unexpected argument $1"
				;;
		esac
	done

	# Get the newest version
	log 'Downloading the newest version from the remote'
	new_version_path="$( mktemp '/tmp/tp-new-version-XXXXXXXXXXXXXXXXXXXX') " || die
	wget -O "$new_version_path" 'https://github.com/lomination/tp/releases/latest/download/tp' || die

	# Determine if an upgrade is needed
	log 'Comparing remote version with local one'
	if cmp "$tp_path/tp" "$new_version_path" ; then
		success 'The local version is already up-to-date!'
	else
		# Create the update script
		log 'Creating the update script'
		# The path to the update script
		update_script_path="$( mktemp '/tmp/tp-update-script-XXXXXXXXXXXXXXXXXXXX') "
		# Write out the update script
		cat > "$update_script_path" <<-EOF
		#!/usr/bin/env bash

		die() {
			echo -e "Fatal error: \$1"
			myecho "$bold${red}Fatal error:$none \$1 (logfile: $logfile)"
			exit 1
		}

		rm '$update_script_path'
		mv '$new_version_path' '$tp_path/tp' || die 'Failed to move the new version.'
		chmod +x '$tp_path/tp' || die 'Failed to make the new script executable'

		rm '$logfile'
		echo -e '$bold${green}Successfully updated!' >&3
		exit 0
		EOF
		log 'Executing the update script'
		# Make the script executable
		chmod +x "$update_script_path" || die 'Could not make the update script executable'
		# Run the script
		exec "$update_script_path" || die 'Could not exectute the update script'
	fi

}


##################################################
#                      MAIN                      #
##################################################


first="$1"
shift

case "$first" in
	'log'|'lg')
		log_cmd "$@"
		;;
	'status'|'st')
		status_cmd "$@"
		;;
	'pull'|'sync')
		pull_cmd "$@"
		;;
	'test')
		test_cmd "$@"
		;;
	'init')
		init_cmd "$@"
		;;
	'save')
		save_cmd "$@"
		;;
	'archi')
		archi_cmd "$@"
		;;
	'submit')
		submit_cmd "$@"
		;;
	'update')
		update_cmd "$@"
		;;
	'help'|'-h'|'--help')
		help_cmd "$@"
		;;
	'-v'|'--version')
		myecho "$version"
		exit 0
		;;
	'--config-path')
		myecho "$conf_path"
		exit 0
		;;
	'-'*|'--'*)
		die "Unknown option $1"
		;;
	*)
		die "Invalid command $1. Check out ${code}tp help$none."
		;;
esac
