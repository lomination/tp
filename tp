#!/usr/bin/env bash


# This script is from https://github.com/lomination/tp.
# This code is under license GNU General Public License version 3.


### Ansi escape codes ###

none='\033[0m'
bold='\033[1m'
decrease='\033[2m'
italics='\033[3m'
underline='\033[4m'
reverse='\033[7m'
red='\033[31m'
green='\033[32m'
yellow='\033[33m'
blue='\033[34m'
magenta='\033[35m'
white='\033[37m'
framed='\033[51m'
bright_yellow='\033[93m'
bright_blue='\033[94m'


### Styles ###

code="$italics$green"
information="$underline"
title="$bold$reverse"
note="${bright_blue}NOTE:$none "
warn="${bright_yellow}WARNING:$none "


### Outputs management ###

# The path of the logfile
logfile="$(mktemp '/tmp/tp-log-XXXXXXXXXXXXXXXXXXXX.log')"
exec 3>&1          # redirect 3 -> 1
exec &> "$logfile" # redirect 1 & 2 -> $logfile


### Config management ###

# The path to the conf
conf_path="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/tp.conf"

# Is 'true' or 'false' depending on whether the configuration file exists
conf_is_valid=''
if [[ -f "$conf_path" ]] && [[ -r "$conf_path" ]]; then
	conf_is_valid='true'
else
	conf_is_valid='false'
fi

# Returns 'true' or 'false' depending on the value of the given key in the configuration.
# If the key is not found, returns the given default value. If the configuration file
# contains '<key>=true' and '<key>=false', returns true.
#
# Takes as parameter the searched key and the default value 'true' or 'false'.
conf_contains() {

	# The key to search in the configuration
	pattern="$1"
	# The default value of the searched key
	default="$2"
	if [[ "$conf_is_valid" == 'false' ]]; then
		echo "$default"
	elif [[ "$(cat "$conf_path")" == *"${pattern}=true"* ]]; then
		echo 'true'
	elif [[ "$(cat "$conf_path")" == *"${pattern}=false"* ]]; then
		echo 'false'
	else
		echo "$default"
	fi

}

# Whether short explanations are displayed while running
conf_log_on_std="$(conf_contains 'log_in_std' 'true')"

# Whether added changes are displayed when git add is performed
conf_list_added_changes="$(conf_contains 'list_added_changes' 'false')"


### Utility functions ###

# Prints the given string in the standard output.
myecho() {

	msg="$1"
	echo -e "$msg" >&3 # TODO

}

# Logs the given message. Writes it in the logfile and the standard output if conf_log_on_std is set to 'true'.
log() {

	msg="$1"
	# echoing to logfile
	echo -e ">>> $msg"
	# echoing to stdout
	if [[ "$conf_log_on_std" == 'true' ]]; then
		myecho "$decrease$msg...$none"
	fi

}

# Removes the current logfile given as parameter.
del_logfile() {

	rm "$logfile"

}

# Shows a failure message and exit the execution with exit code 1.
die() {

	msg="$1"
	if [[ -z "$msg" ]]; then
		myecho "$bold${red}Fatal error!$none (logfile: $logfile)"
	else
		echo -e "Fatal error: $msg"
		myecho "$bold${red}Fatal error:$none $msg (logfile: $logfile)"
	fi
	exit 1

}

# Shows a success message and exit the execution with exit code 0. Also removes the current logfile.
success() {

	msg="$1"
	del_logfile
	if [[ -z "$msg" ]]; then
		myecho "$bold${green}Success!$none"
	else
		myecho "$bold${green}Success:$none $msg"
	fi
	exit 0

}


### Aliases ###

# Shows git log.
log_alias() {

	del_logfile

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command is an alias of the ${code}git log$none command.

				${title}(EXAMPLE)$none

				\t${code}tp log$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	git log --color --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -- >&3
	exit 0

}


# Show git status.
status_alias() {

	del_logfile

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command is an alias of the ${code}git status$none command.

				${title}(EXAMPLE)$none

				\t${code}tp status$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	git status -sb >&3
	exit 0

}

# Pulls the remote repository
pull_alias() {

	del_logfile

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command is an alias of the ${code}git pull$none command.

				${title}(EXAMPLE)$none

				\t${code}tp pull$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	git pull
	success 'repository successfully pulled!'

}

# Prints the path of the config
config_alias() {

	del_logfile

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command prints the path to the config in the standard output.

				${title}(EXAMPLE)$none

				\t${code}tp status$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	myecho "Path to the configuration: $conf_path (validity: $conf_is_valid)\n${note}the config has to follow the format ${code}<key>=<value>$none"
	exit 0

}


# Prints the path of the config
test_alias() {

	del_logfile

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command runs the tests of the current dotnet solution.

				${title}(EXAMPLE)$none

				\t${code}tp test$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	dotnet test --nologo -v q
	dotnet clean &> /dev/null
	exit 0

}


### Commands ###

# Creates the practical environment.
init_cmd() {

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThe ${code}tp init$none command makes the beginning of your practical ${information}quicker$none and ${information}easier$none. It should be used ${information}only once$none at the beginning of your practical. This command clones your repo, creates the main and the test C# solutions, then adds default .gitignore and README files and finally commits and pushes the work.

				${title}(USAGE)$none

				\tIt takes as parameter the title of the ${information}current practical's title$none and the ${information}git url${none} of the empty repo to clone. Both can be found on the intra forge's web site.

				\tUsage: ${code}tp init <title> <git_url>${none}

				${title}(EXAMPLES)$none

				\t${code}tp init "GaulishMall" "firsname.lastname@git.forge.epita.fr:p/epita-prepa-computer-science/prog-...-2029/epita-prepa-computer-science-prog-...-2029-firstname.lastname.git"$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	# The title of the practical
	title="$1"

	# The url to the git repository of the practical.
	git_url="$2"

	# Check if the given arguments are valid
	log 'Checking arguments'
	if [[ -z "$title" ]]; then
		die "Missing required argument 'title' at position 1. Check out ${code}tp help init$none."
	fi
	if [[ -z "$git_url" ]]; then
		die "Missing required argument 'git_url' at position 2. Check out ${code}tp help init$none."
	fi

	# Clone the git repository
	log 'Cloning the repository'
	git clone "$git_url" "$title" || die

	# Go to the cloned repository
	cd "$title"

	# Create dotnet solution
	log 'Creating the dotnet solution'
	dotnet new sln --name "$title" || die

	# Create main project
	log 'Creating the dotnet console project'
	dotnet new console -n "$title" -f net7.0 -lang 'C#' || die
	dotnet sln add "$title/$title.csproj" || die

	# Create test project
	log 'Creating the dotnet xunit project'
	dotnet new xunit -n 'Tests' -f net7.0 -lang 'C#' || die
	dotnet sln add 'Tests/Tests.csproj' || die
	rm 'Tests/UnitTest1.cs'
	dotnet add Tests/Tests.csproj reference "$title/$title.csproj" || die
	echo -e "\nglobal using $title;" >> 'Tests/GlobalUsings.cs' || die

	# Create the .gitignore and README files
	log 'Creating the .gitignore and README files'
	echo -e 'bin/\nobj/\n\n.idea/\n*~\n*.DotSettings.user\n.vscode' > .gitignore || die
	echo "$title" > README || die

	# Push the changes on the remote
	log 'Synchronizing the git remote'
	git add -A || die
	git commit -m 'First commit'  || die
	git push || die

	success
}


# Pushes the work on the intra.
save_cmd() {

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThis command is a shortcut for ${information}git add$none, ${information}git commit$none and ${information}git push$none.

				\t${warn}It adds every current changes in the repository. Make sure to have an appropriate .gitignore file to avoid pushing trash file on the remote!

				${title}(USAGE)$none

				\tIt takes as parameter the ${information}name of the commit$none that will be created and pushed. If none is given, a ${information}random one is generated$none.

				\tUsages:
				\t- ${code}tp save <commit_name>${none}
				\t- ${code}tp save${none}

				${title}(EXAMPLES)$none
				\t
				\t${code}tp save "Fix NegaFibonacci encoding algorithm"$none
				\t${code}tp save$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	# Testing if there are changes to commit
	if [[ $(git status --porcelain | wc -l) == '0' ]]; then
		success 'Nothing to commit, the git working tree is clean.'
	fi

	# Choosing a commit name
	if [[ -n "$1" ]]; then
		commit="$1"
	else
		commit="Commit-$(openssl rand -hex 4)"
	fi

	# Commit the changes
	log 'Committing changes'
	git add -A || die
	[[ "$conf_list_added_changes" == 'true' ]] && git diff --name-status >&3
	git commit -m "$commit" || die

	# Push the commit
	log 'Synchronizing the git remote'
	git push || die

	success

}


# Pushes an archi tag.
archi_cmd() {

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThe ${code}tp archi$none submits an ${information}archi tag$none to the mouli.

				\t${note}It there are uncommitted changes in the working directory, the command will be automatically cancelled.

				${title}(USAGE)$none

				\tIt takes as parameters the ${information}name of the tag$none. If none is given, a random one is generated.

				\t${note}The name of the archi tag should not contain the prefix 'archi-' since it is automatically added.

				\tUsages:
				\t- ${code}tp archi <tag_name>$none
				\t- ${code}tp archi$none

				${title}(EXAMPLES)$none

				\t${code}tp archi "first"$none
				\t${code}tp archi "0"$none
				\t${code}tp archi$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	if [[ $(git status --porcelain | wc -l) -ne '0' ]]; then
		del_logfile
		myecho "${red}Error:$none there are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
		exit 0
	fi

	# Choose a commit and tag name
	if [[ -n "$1" ]]; then
		commit="$1"
	else
		commit="$(openssl rand -hex 4)"
	fi
	
	# Create a tag
	log 'Creating the tag'
	git tag -ma "archi-$tag" || die

	# Push the tag and the commit
	log 'Synchronizing the git remote'
	git push --follow-tags || die

	success

}


# Pushes a submit tag.
submit_cmd() {

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\tThe ${code}tp submit$none submits an ${information}submit tag$none to the mouli.

				\t${warn}Make sure you have already submitted an archi tag and that it has a valid output before running this command.

				${title}(USAGE)$none

				\tIt takes as parameters the ${information}name of the tag$none. If none is given, a random one is generated.

				\t${note}The name of the submit tag should not contain the prefix 'submit-' since it is automatically added.

				\tUsages:
				\t- ${code}tp submit <tag_name>$none
				\t- ${code}tp submit$none

				${title}(EXAMPLES)$none

				\t${code}tp submit "adamsromance"$none
				\t${code}tp submit "first-try"$none
				\t${code}tp submit$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	if [[ $(git status --porcelain | wc -l) -ne '0' ]]; then
		del_logfile
		myecho "${red}Error:$none there are uncommitted changes in the workig directory. Make sure to save them before using ${code}tp save$none before using this command."
		exit 0
	fi

	# Ask for user confirmation

	# The number the user must enter
	num="$(shuf -i 100000-999999 -n 1)"
	myecho "${bold}Are you sure that you want to push a ${red}submit$none$bold tag ?$none\nPlease enter the following number to validate: $underline$num$none. Press enter with an invalid input to exit."
	read -p '> ' input
	if [[ "$input" -ne "$num" ]]; then
		del_logfile
		myecho 'Invalid code. Command canceled!'
		exit 0
	fi
	myecho 'Valid input'

	# Choose a tag name
	if [[ -n "$1" ]]; then
		commit="$1"
	else
		commit="$(openssl rand -hex 4)"
	fi
	
	# Create a tag
	log 'Creating the tag'
	git tag -ma "submit-$tag" || die

	# Push the tag and the commit
	log 'Synchronizing the git remote'
	git push --follow-tags || die

	success

}


# Updates this script.
update_cmd() {

	# Display help
	if [[ "$1" == '--help' || "$1" == '-h' || "$1" == '-?' ]]; then
		del_logfile
		msg=$(
			cat <<-END
				${title}(DESCRIPTION)$none

				\t${information}Update$none this command if an update is available.

				${title}(USAGE)$none

				\tUsage: ${code}tp update$none

				${title}(EXAMPLES)$none

				\t${code}tp update$none
			END
		)
		myecho "$msg"
		exit 0
	fi

	# Find the paht to this script
	log 'Finding the tp file'
	tp_path="$(which 'tp')" || die 'Could not locate the tp script.'

	# Get the newest version
	log 'Downloading the newest version from the remote'
	new_version_path=$(mktemp "/tmp/tp-version-XXXXXXXXXXXXXXXXXXXX") || die
	curl 'https://raw.githubusercontent.com/lomination/tp/refs/heads/main/tp' > "$new_version_path" || die

	# Determine if an upgrade is needed
	log 'Comparing remote version with local one'
	if cmp "$tp_path" "$new_version_path" ; then
		success 'The local version is already up-to-date!' >&3
	else
		# Create the update script
		log 'Creating the update script'
		# The path to the update script
		update_script_path="$(mktemp '/tmp/tp-version-XXXXXXXXXXXXXXXXXXXX')"
		# Write out the update script
		cat > "$update_script_path" <<-EOF
		#!/usr/bin/env bash

		exec 3>&1
		exec &> $logfile

		die() {
			echo -e "Fatal error: \$1"
			myecho "$bold${red}Fatal error:$none \$1 (logfile: $logfile)"
			exit 1
		}

		rm '$update_script_path'
		chmod +x '$tp_path' || die 'Failed to make the new script executable'
		mv '$new_version_path' '$tp_path' || die 'Failed to move the new version.'

		rm '$logfile'
		echo -e '$bold${green}Successfully updated!' >&3
		exit 0
		EOF
		log 'Executing the update script'
		# Make the script executable
		chmod +x "$update_script_path" || die 'Could not make the update script executable'
		# Run the script
		exec "$update_script_path" || die 'Could not exectute the update script'
	fi

}


# Shows a help message for the given command.
help_cmd() {

	del_logfile
	case "$1" in
		# Aliases
		'log'|'lg')
			log_alias '--help'
			;;
		'status'|'st')
			status_alias '--help'
			;;
		# Commands
		'init')
			init_cmd '--help'
			;;
		'save')
			save_cmd '--help'
			;;
		'archi')
			archi_cmd '--help'
			;;
		'submit')
			submit_cmd '--help'
			;;
		'update')
			update_cmd '--help'
			;;
		''|'help'|'-h'|'--help')
			msg=$(
				cat <<-END
					${title}(DESCRIPTION)$none

					\t${information}Display the documentation$none associated with a given command.

					${title}(USAGE)$none

					\tIt takes a parameter a ${information}command$none among ${code}init$none, ${code}save$none, ${code}archi$none, ${code}submit$none, ${code}update$none, ${code}log$none, ${code}status$none, ${code}pull$none, ${code}config$none, ${code}test$none, and ${code}help$none.

					\tUsage: ${code}tp help <command>$none
					\tUsage: ${code}tp help$none

					${title}(EXAMPLES)$none

					\t${code}tp help init$none
					\t${code}tp help submit$none
					\t${code}tp help log$none
					\t${code}tp help$none
				END
			)
			myecho "$msg"
			exit 0
			;;
		*)
			myecho "$bold${red}Error:$none invalid command $code$1$none. Check out ${code}tp help$none for help."
			exit 1
			;;
	esac

}


### Main script ###

case "$1" in
	# Aliases
	'log'|'lg')
		log_alias "$2"
		;;
	'status'|'st')
		status_alias "$2"
		;;
	'pull'|'sync')
		pull_alias "$2"
		;;
	'cfg'|'conf'|'config'|'configuration')
		config_alias "$2"
		;;
	'test')
		test_alias "$2"
		;;
	# Commands
	'init')
		init_cmd "$2" "$3"
		;;
	'save')
		save_cmd "$2"
		;;
	'archi')
		archi_cmd "$2" "$3"
		;;
	'submit')
		submit_cmd "$2" "$3"
		;;
	'update')
		update_cmd "$2"
		;;
	'help')
		help_cmd "$2"
		;;
	*)
		del_logfile
		myecho "${red}Error:$none invalid command $code$1$none. Check out ${code}tp help$none for help."
		exit 1
		;;
esac
